# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

pr:
  branches:
    include:
    - main
  paths:
    include:
      - apis/poi

pool:
  vmImage: 'windows-latest'

variables:
- group: vg-poi-api
- name: buildConfiguration
  value: 'Release'
- name: buildPlatform
  value: 'Any CPU'

jobs:
- job: VSBuild
  steps:
  - task: NuGetToolInstaller@1

  - task: NuGetCommand@2
    inputs:
      restoreSolution: '$(solution)'
      
  - task: VSBuild@1
    inputs:
      solution: '$(solution)'
      msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" /p:DeployIisAppPath="Default Web Site"'
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - task: VSTest@2
    inputs:
      platform: '$(buildPlatform)'
      configuration: '$(buildConfiguration)'

  - script: echo Hello, world!
    displayName: 'Run a one-line script'

    # This malformed command causes the job to fail
    # Only run this command if the succeed variable is set to false
  - script: git clone malformed input
    condition: eq(${{ parameters.succeed }}, false)

# This job creates a work item, and only runs if the previous job failed
- job: ErrorHandler
  dependsOn: VSBuild
  condition: failed()
  steps: 
    - bash: |
        az boards work-item create \
          --title "Build $(build.buildNumber) failed" \
          --type issue \
          --org $(System.TeamFoundationCollectionUri) \
          --project $(System.TeamProject)
      env: 
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
      displayName: 'Create work item on failure'


